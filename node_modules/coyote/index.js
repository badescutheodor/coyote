'use strict';

const http    = require('http');
const fs      = require('fs');
const Router  = require('./router.js');

const Helpers = require('./helpers.js');

class Coyote
{
    /**
     * Build the actual entity and boot the
     * http server
     * @param port
     */
    constructor(port)
    {
        this.port = port;
        this.alias();
        this.boot();
    }

    /**
     * Register a new route inside the router
     * component
     */
    route()
    {
        Router.register('route', Helpers.to(arguments, 'array'));
    }

    /**
     * Register a new middleware inside the router
     * component
     */
    middleware()
    {
        Router.register('middleware', arguments);
    }

    alias()
    {
        const Aliases = {
            any:    '*',
            get:    'get',
            post:   'post',
            put:    'put',
            delete: 'delete',
            patch:  'patch',
            head:   'head'
        };

        Helpers.forOwn(Aliases, (v, k) => {
            this[k] = function() {
                Router.register('route', Helpers.put(arguments, k, 1));
            };
        });
    }

    /**
     * Boot the Coyote event handler
     */
    boot()
    {
        /**
         * Register middlewares and boot the http
         * server
         */
        let middlewares = fs.readdirSync(`${__dirname}/middlewares`);

        Helpers.forOwn(middlewares, (m) => {
            let method = m.substr(0, m.length - 3);

            if ( Helpers.has(this, method) )
            {
                return;
            }

            let Middleware = require(`${__dirname}/middlewares/${m}`);

            this[method] = function() {
                let func       = Function.bind.apply(Middleware, [null].concat(Helpers.to(arguments, 'array')));
                let middleware = new func();
                return middleware.handle();
            };
        });

        /**
         * Boot the http server as we done registering
         */
        http.createServer(Router.dispatch).listen(this.port);
    }
}

module.exports = Coyote;