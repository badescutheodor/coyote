'use strict';

class Helpers
{
    static has(o, k)
    {
        if ( Helpers.is(o, 'array') )
        {
            Helpers.forOwn(o, (v, k) => {
                if ( o.hasOwnProperty(v) )
                {
                    return true;
                }
            });

            return false;
        }

        return Helpers.is(o, 'undefined') ? false : o.hasOwnProperty(k);
    }

    static any()
    {
        let a     = null;
        let found = false;

        Helpers.forOwn(arguments, (v, k, i) => {
            if ( i === 0 )
            {
                a = v;
                return;
            }

            if ( a.indexOf(v) > -1 )
            {
                found = a[v];
            }
        });

        return found;
    }

    static is(o, t)
    {
        return t === 'array' ? ( t instanceof Array ) : typeof o === t;
    }

    static forOwn(o, c)
    {
        let i = 0;

        for(var k in o)
        {
            c(o[k], k, i);
            i++;
        }
    }

    static to(s, t)
    {
        switch ( true )
        {
            case t === 'array':
            {
                return Helpers.is(s, 'array') ? s : ((s) => {
                    if ( !Helpers.is(s, 'object') )
                    {
                        return [s];
                    }

                    let c = [];

                    Helpers.forOwn(s, (e) => {
                        c.push(e);
                    });

                    return c;
                })(s);
            } break;

            default:
            {
                return s;
            } break;
        }
    }

    static put(a, e, i)
    {
        if ( !Helpers.is(a, 'array') )
        {
            a = Helpers.to(a, 'array');
        }

        a.splice(i, 0, e);
        return a;
    }
}

module.exports = Helpers;